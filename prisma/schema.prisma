generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  PROVIDER
  VENDOR
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  phone             String    @unique
  password          String?
  name              String
  avatar            String?
  role              UserRole  @default(CUSTOMER)
  isActive          Boolean   @default(true)
  isEmailVerified   Boolean   @default(false)
  isPhoneVerified   Boolean   @default(false)
  latitude          Float?
  longitude         Float?
  address           String?
  city              String?
  country           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  wallet            Wallet?
  provider          Provider?
  vendor            Vendor?
  customerBookings  Booking[] @relation("CustomerBookings")
  providerBookings  Booking[] @relation("ProviderBookings")

  @@map("users")
}

model Wallet {
  id            String   @id @default(cuid())
  userId        String   @unique
  balance       Float    @default(0)
  isBlocked     Boolean  @default(false)
  lastTopUp     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Provider {
  id                String    @id @default(cuid())
  userId            String    @unique
  bio               String?
  availability      Boolean   @default(true)
  serviceCategories String[]
  experience        String?
  hourlyRate        Float?
  rating            Float     @default(0)
  totalJobs         Int       @default(0)
  verificationStatus VerificationStatus @default(UNVERIFIED)
  licenseNumber     String?
  licenseImage      String?
  idDocument        String?
  businessRegistration String?
  faceVerification  String?
  isBlueTickVerified Boolean  @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("providers")
}

model Service {
  id          String    @id @default(cuid())
  name        String
  category    String
  description String?
  basePrice   Float
  icon        String?
  country     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  bookings    Booking[]

  @@map("services")
}

model Booking {
  id                String    @id @default(cuid())
  customerId        String
  providerId        String?
  serviceId         String
  title             String
  description       String?
  scheduledAt       DateTime?
  completedAt       DateTime?
  isUrgent          Boolean   @default(false)
  estimatedPrice    Float?
  finalPrice        Float?
  commission        Float?
  status            BookingStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  
  pickupLatitude    Float?
  pickupLongitude   Float?
  pickupAddress     String?
  dropoffLatitude   Float?
  dropoffLongitude  Float?
  dropoffAddress    String?
  
  chatRoomId        String?
  isLocationSharing Boolean   @default(false)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  customer          User      @relation("CustomerBookings", fields: [customerId], references: [id])
  provider          User?     @relation("ProviderBookings", fields: [providerId], references: [id])
  service           Service   @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

model Vendor {
  id              String   @id @default(cuid())
  userId          String   @unique
  businessName    String
  businessAddress String?
  businessPhone   String?
  businessEmail   String?
  description     String?
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vendors")
}
Click "Commit new
